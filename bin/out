#!/bin/bash
set -e
set -o pipefail
exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging

# shellcheck source=bin/common.sh
source "$( dirname "$( readlink -f "$0" )")"/common.sh

DRY_RUN=$(jq -r ".params.dry_run // \"false\"" < "$payload")
NAMESPACE=$(jq -r ".params.namespace // \"$NAMESPACE\"" < "$payload")

NAMESPACE_FILE=$(jq -r ".params.namespace_file // \"\"" < "$payload")
if [[ -n "$NAMESPACE_FILE" ]]; then
    if [ -e "$NAMESPACE_FILE" ]; then
        NAMESPACE=$(head -n1 < "$NAMESPACE_FILE" | tr -d " ")
    else
        echo "Namespace file '$NAMESPACE_FILE' does not exist."
        exit 1
    fi
fi

ANNOTATIONS=$(jq -r ".params.annotations // \"{}\"" < "$payload")

ANNOTATIONS_FILE=$(jq -r ".params.annotations_file // \"\"" < "$payload")
if [[ -n "$ANNOTATIONS_FILE" ]]; then
    if [[ "$ANNOTATIONS" != "{}" ]]; then
        echo "Do not specify 'annotations' and 'annotations_file' at the same time."
        jq .params < "$payload"
        exit 1
    fi
    if [ -e "$ANNOTATIONS_FILE" ]; then
        ANNOTATIONS=$( jq . < "$ANNOTATIONS_FILE" || { echo "Annotations file '$ANNOTATIONS_FILE' is not proper JSON">&2 ; cat "$ANNOTATIONS_FILE" >&2 ; exit 1; } )
    else
        echo "Annotations file '$ANNOTATIONS_FILE' does not exist."
        exit 1
    fi
fi

LABELS=$(jq -r ".params.labels // \"{}\"" < "$payload")

LABELS_FILE=$(jq -r ".params.labels_file // \"\"" < "$payload")
if [[ -n "$LABELS_FILE" ]]; then
    if [[ "$LABELS" != "{}" ]]; then
        echo "Do not specify 'labels' and 'labels_file' at the same time."
        jq .params < "$payload"
        exit 1
    fi
    if [ -e "$LABELS_FILE" ]; then
        LABELS=$( jq . < "$LABELS_FILE" || { echo "LABELS file '$LABELS_FILE' is not proper JSON">&2 ; cat "$LABELS_FILE" >&2 ; exit 1; } )
    else
        echo "LABELS file '$LABELS_FILE' does not exist."
        exit 1
    fi
fi

REMOVE=$(jq -r ".params.remove // \"false\"" < "$payload")

if [[ -z "$NAMESPACE" ]]; then
    echo "Not setting either source.namespace or params.namespace."
    exit 1
fi

if [[ $DRY_RUN == "true" ]]; then
    DRY_RUN="--dry-run"
else
    DRY_RUN=""
fi

if [[ $REMOVE == "true" ]]; then

    if [[ -n "$DRY_RUN" ]]; then
        echo "# Would delete namespace/$NAMESPACE but DRYRUN"
    else
        $KUBECTL delete $DRY_RUN namespace "$NAMESPACE"
    fi

else

    KUBE_APPLY="$(mktemp "k8s-apply.XXXXXX")"

    (
    printf "apiVersion: v1
kind: Namespace
metadata:
  name: %s
" "$NAMESPACE"
    if [[ $LABELS != "{}" ]]; then
        printf "  labels:\\n"
        echo "$LABELS" | jq -r '. | to_entries? | .[] | "    \(.key): \"\(.value)\""'
    fi
    if [[ $ANNOTATIONS != "{}" ]]; then
        printf "  annotations:\\n"
        echo "$ANNOTATIONS" | jq -r '. | to_entries? | .[] | "    \(.key): \"\(.value)\""'
    fi
    ) | tee "$KUBE_APPLY" | nl -ba

    echo
    $KUBECTL apply $DRY_RUN -f "$KUBE_APPLY"

fi

data="$(mktemp "$TMPDIR/k8s-resource-data.XXXXXX")"
$KUBECTL get -o json "namespace/$NAMESPACE" | tee "$data" || true # if there are errors or namespace missing, return empty.
OUT_ANNOTATIONS=$(jq -r "$GET_ANNOTATIONS" < "$data" | tr -d \")
OUT_LABELS=$(jq -r "$GET_LABELS" < "$data" | tr -d \")

result="$(jq -n "{version:{name:\"$NAMESPACE\",annotations:\"$OUT_ANNOTATIONS\",labels:\"$OUT_LABELS\"}}")"

echo "Out complete"
echo "$result" | jq -s add >&3
